# Cnn based classifier config file

# Training params
[train_params]
training_folders = 'negative', 'positive' 
# each folder corresponds to data from one label in the multiclass clf. negative will be output 0, positive will be output 1 in the clf
target_label_ids = 1, 1002	
# this list expects to have an even number of integers, which corresponds to pairs classifier_outputA, label_idA, classifier_outputB, label_idB. Not every possible output of the classifier needs a target label associated. The training folders get assigned classifier outputs incrementally, from 0 to n.


# descriptor extraction configuration
[cnn_model_params]
model_name = 'caffenet-fc8'
# model name (as stored on the accesible DB)
layer_name = ''
# for example 'fc8', '' -> will use the final layer (i.e., calls predict and uses BATCHES) from the model used
						# otherwise, string with the layer name we want to use as a feature ('fc8', 'fc7', ...)
oversampling = False	# True is slower but more accurate cause it evaluates multiple crops/mirror options
						# Usually worth if this is used as final classifier, not as a feature
						# ONLY valid if we use predict (i.e, not specify any particular layer name)

# Classifier configuration
[classifier_params]
classifier_type = 'Cnn based' 
# options 'decision stump', 'random_forest', 'svm'
clf_type = 0 		# 0 - SVM, 1 - Random Forest, 2 - Decision Stump
svm_kernel = 2 		# default 5 is hist intersection, 2 is radial basis functions (for one-class SVM)
svm_gamma = 0.7		# gamma value for svm (if it applies for the selected svm kernel)
svm_c = 1		# C value for svm
rf_n_estimators = 10 # number of estimators random fores
rf_criterion = 'gini' # criteria for random forest algorithms
rf_min_split = 2 # split number random forest
rf_min_leaf = 1 # number of leaves random forest
ds_threshold = 0.5 # value for decision stump OR rf class probability output. We reject the top class found for a particular frame if it's probability is below this threshold

[crossval_params]
test_size = 0.1  	# default 0.1, ratio of training data to be used as test in cross-validation
valid_th = 0.7		# default 0.7, threshold for median cross validation accuracy to accept the obtained classfier with the given training data

[acceptance_params]
max_num_frames = 50 # max number of frames to be processed per video. 
					# NOTE: Any int can be used, but current s3 uploading method uploads using this step 0:numframes:50, so only those frames will be submited to mturk
					# if == 0 ALL available FRAMES for the video will be processed
accept_th = 0.3  	# ratio of the total number of frames evaluated that need to be positive to classify the video as the target label
min_accept = 1      # absolute minimum number of frames necessary to store the video result (helpful for short videos with less than max_num_frames
